function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx5 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.362;0.378;0.356;0.372;0.353];
x1_step1.gain = [9.43396226415095;9.43396226415095;9.04977375565611;9.1324200913242;9.00900900900901];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.8518920132303564596;-2.2772937700508948389;-0.33010172726105768692;-0.92857807625808308494;0.24822438286800216356;-0.60114146123040279601;-0.97243225403000355112;-1.8364581916770805758;1.8376063459823008817;-2.5471085602160754569];
IW1_1 = [1.2715990585974885629 -1.3875976582441218454 0.001876580403042059017 -1.2386530514385218904 -0.98132051908169171117;-0.10011671397310759057 -1.4261837215202262108 -1.1491778431025012619 -0.16459994337672401166 -0.9465397999381184313;0.55724515650118255916 1.9034774019171061266 -0.71662869508195725654 0.83877977947793225244 0.9997403671400372227;1.0666598161779663467 0.86772441788067899981 1.1393176712908397175 -0.12935779745413159003 -1.4213625743667144263;-0.038654469347514756883 0.58629301149673562765 1.5228268156200819305 -0.67258807279591015238 1.787817414309796904;-0.76151460758228550763 1.1976084292623365712 -1.549248192058260809 1.1781588086384606751 -0.11578523309752215831;-0.91126177630870763835 1.713948816200033809 0.64530587763477054164 0.1138759525972039971 -0.78959106318090177545;-0.83253100849959971175 1.3445250387484641852 1.3277746044449010299 -0.64369101362337721728 0.52654303289082293738;0.27693949759935365673 -1.3098730522101296181 -0.91139901123101185743 -1.4890908263790461064 -0.51640495955026888275;-1.1185861189128922799 1.0800462436724127535 -1.2236225018181465796 -0.34830820733172590531 -0.79871685113675627843];

% Layer 2
b2 = 0.055062730115914108875;
LW2_1 = [0.61265920252140293467 -0.52702449698546682821 0.13487999075275469707 0.10609004529002613593 0.27430829726790012524 0.46708401648352398938 -0.50692386946493595001 0.55801528579315540224 -0.11479753004902418234 -0.67050742421006270799];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 8.89284126278346;
y1_step1.xoffset = 0.3518;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
